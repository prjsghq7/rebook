<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dev.rebook.mappers.ReviewMapper">

    <select id="selectReviewsById" resultType="com.dev.rebook.entities.ReviewEntity">
        SELECT `id`          AS `id`,
               `user_id`     AS `userId`,
               `book_id`     AS `bookId`,
               `scope`       AS `scope`,
               `comment`     AS `comment`,
               `created_at`  AS `createdAt`,
               `modified_at` AS `modifiedAt`,
               `is_deleted`  AS `isDeleted`
        FROM `rebook`.`reviews`
        WHERE `id` = #{id}
          AND `is_deleted` = FALSE
        LIMIT 1
    </select>

    <select id="selectReviewsByBookId" resultType="com.dev.rebook.dtos.ReviewWithProfileDto">
        SELECT `r`.`id`          AS `id`,
               `r`.`user_id`     AS `userId`,
               `r`.`book_id`     AS `bookId`,
               `u`.`nickname`    AS `nickname`,
               `u`.`profile_img` AS `profileImg`,
               `r`.`comment`     AS `comment`,
               `r`.`scope`       AS `scope`,
               `r`.`created_at`  AS `reviewDate`
        FROM `rebook`.`reviews` AS `r`
                 JOIN `rebook`.`users` AS `u` ON `r`.user_id = `u`.`id`
        WHERE `r`.`book_id` = #{bookId}
          AND `r`.`is_deleted` = FALSE
        ORDER BY `r`.created_at DESC
        LIMIT #{reviewPageVo.rowCount} OFFSET #{reviewPageVo.dbOffset}
    </select>

    <select id="selectRecentReviews" resultType="com.dev.rebook.dtos.RecentReviewDto">
        SELECT `r`.`id`         AS `id`,
               `r`.`book_id`    AS `bookId`,
               `b`.`title`      AS `bookTitle`,
               `r`.`comment`    AS `comment`,
               `r`.`scope`      AS `scope`,
               `r`.`created_at` AS `reviewDate`
        FROM `rebook`.`reviews` AS `r`
                 JOIN `rebook`.`books` AS `b` ON `r`.book_id = `b`.`id`
        WHERE `r`.`user_id` = #{userId}
          AND `r`.`is_deleted` = FALSE
        ORDER BY `r`.created_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectReviewSummary" resultType="com.dev.rebook.dtos.ReviewSummaryDto">
        SELECT COUNT(0)               AS totalCount,
               ROUND(AVG(`scope`), 1) AS averageScope,
               MAX(`created_at`)      AS lastReviewDate
        FROM `rebook`.`reviews`
        WHERE `user_id` = #{userId}
          AND `is_deleted` = FALSE
    </select>

    <select id="selectCountByUserIdAndBookId" resultType="java.lang.Integer">
        SELECT COUNT(0)
        FROM `rebook`.`reviews`
        WHERE `user_id` = #{userId}
          AND `book_id` = #{bookId}
          AND `is_deleted` = FALSE
    </select>
    <select id="selectPopularUserBooks">
        SELECT `T1`.`book_id`            AS `bookId`,
               `T2`.`title`              AS `title`,
               `T2`.`cover`              AS `cover`,
               `T2`.`author`             AS `author`,
               COUNT(`T1`.id)            AS `reviewCount`,
               ROUND(AVG(`T1`.scope), 1) AS `avgScope`,
               `T2`.`adult`              AS `adult`
        FROM `rebook`.`reviews` AS `T1`
                 JOIN `rebook`.`books` AS `T2` ON `T1`.`book_id` = `T2`.`id`
        WHERE `T1`.is_deleted = FALSE
        GROUP BY `T1`.`book_id`
        HAVING COUNT(`T1`.id) >= 1
        ORDER BY `reviewCount` DESC, avgScope DESC
        LIMIT 10
    </select>

    <insert id="insert"
            useGeneratedKeys="true"
            keyColumn="id"
            keyProperty="id">
        INSERT INTO `rebook`.`reviews` (user_id, book_id, scope, comment, created_at, modified_at, is_deleted)
        VALUES (#{review.userId},
                #{review.bookId},
                #{review.scope},
                #{review.comment},
                #{review.createdAt},
                #{review.modifiedAt},
                #{review.isDeleted})
    </insert>

    <update id="update">
        UPDATE `rebook`.`reviews`
        SET `user_id` = #{review.userId},
            `book_id`    = #{review.bookId},
            `scope` = #{review.scope},
            `comment` = #{review.comment},
            `modified_at` = #{review.modifiedAt},
            `is_deleted` = #{review.isDeleted}
        WHERE `id` = #{review.id}
            LIMIT 1
    </update>

    <select id="selectCountReviewByBookId" resultType="java.lang.Integer">
        SELECT COUNT(0)
        FROM `rebook`.`reviews`
        WHERE `book_id` = #{bookId}
          AND `is_deleted` = FALSE
    </select>

    <select id="selectCountReview" resultType="java.lang.Integer">
        SELECT COUNT(0)
        FROM `rebook`.`reviews` AS `r`
        JOIN `rebook`.`books` AS `b` ON `r`.`book_id` = `b`.`id`
        JOIN `rebook`.`users` AS `u` ON `r`.`user_id` = `u`.`id`
        WHERE `r`.`is_deleted` = FALSE
        <if test="reviewPageButtonVo.mine == true">
            AND `r`.`user_id` = #{user.id}
        </if>
    </select>

    <select id="selectReviewAll" resultType="com.dev.rebook.dtos.ReviewPageItemDto">
        SELECT `b`.`id` AS `bookId`,
        `b`.`title` AS `bookTitle`,
        `r`.`comment` AS `comment`,
        `u`.`nickname` AS `nickname`,
        `b`.`cover` AS `cover`,
        `r`.`scope` AS `scope`,
        `b`.`adult` AS 'adult'
        FROM `rebook`.`reviews` AS `r`
        JOIN `rebook`.`books` AS `b` ON `r`.`book_id` = `b`.`id`
        JOIN `rebook`.`users` AS `u` ON `r`.`user_id` = `u`.`id`
        WHERE `r`.`is_deleted` = FALSE
        <if test="reviewPageButtonVo.mine == true">
            AND `r`.`user_id` = #{user.id}
        </if>
        <choose>
            <!-- 제목순 -->
            <when test="reviewPageButtonVo.sortType != null and reviewPageButtonVo.sortType == 0">
                ORDER BY `b`.`title` ${reviewPageButtonVo.sort}
            </when>
            <!-- 별점순 -->
            <when test="reviewPageButtonVo.sortType != null and reviewPageButtonVo.sortType == 1">
                ORDER BY `r`.`scope` ${reviewPageButtonVo.sort}
            </when>
            <!-- 닉네임순 -->
            <when test="reviewPageButtonVo.sortType != null and reviewPageButtonVo.sortType == 2">
                ORDER BY `u`.`nickname` ${reviewPageButtonVo.sort}
            </when>
            <!-- 작성일순 -->
            <when test="reviewPageButtonVo.sortType != null and reviewPageButtonVo.sortType == 3">
                ORDER BY `r`.`created_at` ${reviewPageButtonVo.sort}
            </when>
            <otherwise>
                ORDER BY `b`.`title` ${reviewPageButtonVo.sort}
            </otherwise>
        </choose>
        LIMIT #{reviewPageVo.rowCount} OFFSET #{reviewPageVo.dbOffset}
    </select>

    <select id="selectDailyReviewRegisterStats"
            resultType="com.dev.rebook.dtos.dashboard.DailyReviewRegisterStatsDto">
        SELECT DATE(`created_at`) AS `date`,
               COUNT(0)     AS `reviewCount`
        FROM `rebook`.`reviews`
        <where>
            <if test="from != null">
                AND DATE(`created_at`) &gt;= #{from}
            </if>
            <if test="to != null">
                AND DATE(`created_at`) &lt;= #{to}
            </if>
        </where>
        GROUP BY `date`
    </select>

</mapper>